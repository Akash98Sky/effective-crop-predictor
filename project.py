# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rODDx77-sFW4EGP2-MR659IHCCvxa9XW
"""

import joblib
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelBinarizer
import pandas as pd
import numpy as np
import seaborn as sns


df = pd.read_csv('crop_new.csv')

df.head(6)
df.tail(6)

shuffled_df = df.sample(frac=1)
shuffled_df.to_csv('crop.csv', index=False)

shuffled_df.head(6)

dF = shuffled_df.drop('Unnamed: 0', axis=1)
dF.head()

sns.pairplot(dF)

dF.drop('Crop', axis=1).describe()

X = dF.drop('Crop', axis=1)
X

y = dF['Crop']
Z = dF['Crop']
y

y.unique()


encoder = LabelBinarizer()

y = encoder.fit_transform(y)
y


X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=101)

X_train.shape
X_test.shape
y_train.shape

scaler = MinMaxScaler()

scaler.fit(X_train)

scaled_X_train = scaler.transform(X_train)
scaled_X_test = scaler.transform(X_test)


model = Sequential()

model.add(Dense(units=6, activation='relu', input_shape=[6, ]))
model.add(Dense(units=9, activation='softmax'))

model.compile(optimizer='adam', loss='categorical_crossentropy',
              metrics=['accuracy'])


early_stop = EarlyStopping(patience=10)

model.fit(x=scaled_X_train, y=y_train, epochs=300,
          validation_data=(scaled_X_test, y_test), callbacks=[early_stop])

metrics = pd.DataFrame(model.history.history)

metrics[['loss', 'val_loss']].plot()

metrics[['accuracy', 'val_accuracy']].plot()

model.evaluate(scaled_X_test, y_test, verbose=0)

epochs = len(metrics)
epochs

model.save("crop_model.h5")


joblib.dump(scaler, 'crop_scaler.pkl')

predictions = model.predict_classes(scaled_X_test)
predictions

new_gem = [[6.9, 29.24, 33.37, 56.46, 69.98, 59.80]]

new_gem = scaler.transform(new_gem)

model.predict_classes(new_gem)

predictions = pd.Series(predictions.reshape(180,))
